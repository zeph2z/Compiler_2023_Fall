decl @getint(): i32
decl @getch(): i32
decl @getarray(*i32): i32
decl @putint(i32)
decl @putch(i32)
decl @putarray(i32, *i32)
decl @starttime()
decl @stoptime()

fun @add(@a: i32, @b: i32): i32 {
%entry:
    @b_1 = alloc i32
    store @b, @b_1
    @a_1 = alloc i32
    store @a, @a_1
    %0 = load @a_1
    %1 = load @b_1
    %2 = add %0, %1
    ret %2
}


fun @sub(@a: i32, @b: i32): i32 {
%entry:
    @b_1 = alloc i32
    store @b, @b_1
    @a_1 = alloc i32
    store @a, @a_1
    %3 = load @a_1
    %4 = load @b_1
    %5 = sub %3, %4
    ret %5
}


fun @mul(@a: i32, @b: i32): i32 {
%entry:
    @b_1 = alloc i32
    store @b, @b_1
    @a_1 = alloc i32
    store @a, @a_1
    %6 = load @a_1
    %7 = load @b_1
    %8 = mul %6, %7
    ret %8
}


fun @div(@a: i32, @b: i32): i32 {
%entry:
    @b_1 = alloc i32
    store @b, @b_1
    @a_1 = alloc i32
    store @a, @a_1
    %9 = load @a_1
    %10 = load @b_1
    %11 = div %9, %10
    ret %11
}


fun @main(): i32 {
%entry:
    @temp_0 = alloc i32
    br 0, %true_0, %false_0

%true_0:
    store 1, @temp_0
    jump %final_0

%false_0:
    @temp_1 = alloc i32
    br 1, %true_1, %false_1

%true_1:
    store 2, @temp_1
    jump %final_1

%false_1:
    store 0, @temp_1
    jump %final_1

%final_1:
    %12 = load @temp_1
    store %12, @temp_0
    jump %final_0

%final_0:
    %13 = load @temp_0
    @x_1 = alloc i32
    store %13, @x_1
    %14 = load @x_1
    ret %14
}


