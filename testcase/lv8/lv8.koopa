decl @getint(): i32
decl @getch(): i32
decl @getarray(*i32): i32
decl @putint(i32)
decl @putch(i32)
decl @putarray(i32, *i32)
decl @starttime()
decl @stoptime()

fun @add(@a: i32, @b: i32): i32 {
%entry:
    @b_1 = alloc i32
    store @b, @b_1
    @a_1 = alloc i32
    store @a, @a_1
    %0 = load @a_1
    %1 = load @b_1
    %2 = add %0, %1
    ret %2
}


fun @sub(@a: i32, @b: i32): i32 {
%entry:
    @b_1 = alloc i32
    store @b, @b_1
    @a_1 = alloc i32
    store @a, @a_1
    %3 = load @a_1
    %4 = load @b_1
    %5 = sub %3, %4
    ret %5
}


fun @mul(@a: i32, @b: i32): i32 {
%entry:
    @b_1 = alloc i32
    store @b, @b_1
    @a_1 = alloc i32
    store @a, @a_1
    %6 = load @a_1
    %7 = load @b_1
    %8 = mul %6, %7
    ret %8
}


fun @div(@a: i32, @b: i32): i32 {
%entry:
    @b_1 = alloc i32
    store @b, @b_1
    @a_1 = alloc i32
    store @a, @a_1
    %9 = load @a_1
    %10 = load @b_1
    %11 = div %9, %10
    ret %11
}


fun @main(): i32 {
%entry:
    %12 = call @sub(1, 2)
    %13 = call @div(4, 5)
    %14 = call @mul(3, %13)
    %15 = call @add(%12, %14)
    @x_1 = alloc i32
    store %15, @x_1
    %16 = ne 0, 1
    br %16, %logic_true_0, %logic_false_0

%logic_false_0:
    %17 = ne 0, 0
    %18 = ne 0, 0
    br %18, %logic_true_2, %logic_false_0

%logic_true_2:
    %19 = load @x_1
    %20 = call @sub(1, %19)
    %21 = ne 0, %20
    %22 = ne 0, %21
    br %22, %logic_true_0, %logic_false_1

%logic_false_1:
    %23 = load @x_1
    %24 = ne 0, %23
    br %24, %logic_true_0, %logic_false_3

%logic_false_3:
    %25 = call @add(1, 2)
    %26 = gt %25, 10
    %27 = ne 0, %26
    %28 = call @div(%27, 5)
    %29 = call @mul(3, %28)
    %30 = ne 0, %29
    %31 = call @add(%17, %30)
    @y_1 = alloc i32
    store %31, @y_1
    %32 = load @x_1
    %33 = load @y_1
    %34 = add %32, %33
    ret %34
}


